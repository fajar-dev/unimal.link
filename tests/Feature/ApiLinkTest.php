<?php

namespace Tests\Feature;

use App\Contracts\UrlShortenerContract;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ApiLinkTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected $urlShortener;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->urlShortener = app(UrlShortenerContract::class);
    }

    /** @test */
    public function it_returns_unauthorized_response_without_api_key()
    {
        $url = 'https://milon.im/';

        $link = $this->urlShortener->make($url);
        $link->save();

        $response = $this->withHeaders([
            'Accept' => 'application/json',
            'Content-Type' => 'application/json',
        ])->get('/api/links/'.$link->hash);

        $response->assertStatus(401)
            ->assertJson([
                'message' => 'Unauthenticated.',
            ]);
    }

    /** @test */
    public function it_returns_a_link_for_a_hashed_url()
    {
        $url = 'https://milon.im/';

        $user = User::factory()->create();
        $link = $this->urlShortener->make($url);
        $link->save();

        $response = $this->withHeaders([
            'Accept' => 'application/json',
            'Content-Type' => 'application/json',
            'Authorization' => 'Bearer '.$user->api_token,
        ])->getJson('/api/links/'.$link->hash);

        $response->assertStatus(200)
            ->assertJson([
                'error' => false,
                'link' => [
                    'url' => $url,
                ],
            ]);
    }

    /** @test */
    public function it_can_create_a_hashed_link_through_api()
    {
        $url = 'https://milon.im/';

        $user = User::factory()->create();

        $response = $this->withHeaders([
            'Accept' => 'application/json',
            'Content-Type' => 'application/json',
            'Authorization' => 'Bearer '.$user->api_token,
        ])->postJson('/api/links/', [
            'url' => $url,
            'is_private' => false,
        ]);

        $response->assertStatus(201)
             ->assertJson([
                 'error' => false,
                 'link' => [
                     'url' => $url,
                 ],
             ]);
    }
}
